{
	"info": {
		"_postman_id": "077ec69a-c927-4da9-ba7d-017ae100a474",
		"name": "Final assesment collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21517775"
	},
	"item": [
		{
			"name": "first endpoint {word}",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "wrong API key 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {",
											"    const body = pm.response.json();",
											"    pm.expect(body.message).to.be.include('You are not subscribed to this API.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "66ef45eb8amsh964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial"
									]
								}
							},
							"response": []
						},
						{
							"name": "no API Key 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {",
											"    const body = pm.response.json();",
											"    pm.expect(body.message).to.be.include('nvalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Valid key and word 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('crucial');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', function () {",
											"    const body = pm.response.json();",
											"    const result = body.results.find(el => el.definition === 'of the greatest importance');",
											"",
											"    pm.expect(result).not.undefined;",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "EP",
					"item": [
						{
							"name": "word - with hyphen 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('x-ray');",
											"});",
											"",
											"",
											"pm.test('The `Definition` is correct', function () {",
											"    const body = pm.response.json();",
											"    const result = body.results.find(el => el.definition === 'a radiogram made by exposing photographic film to X rays; used in medical diagnosis');",
											"",
											"    pm.expect(result).not.undefined;",
											"})",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/x-ray",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"x-ray"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - space between (compound word) 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('ice cream');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', () => {",
											"    const body = pm.response.json();",
											"    _.each(body.results, (item) => {",
											"        pm.expect(item.definition).to.include('frozen dessert containing cream and sugar and flavoring')",
											"    })",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/ice cream",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"ice cream"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - 1 digit - 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('2');",
											"});",
											"",
											"",
											"pm.test('The `Definition` is correct', function () {",
											"    const body = pm.response.json();",
											"    const result = body.results.find(el => el.definition === 'being one more than one');",
											"",
											"    pm.expect(result).not.undefined;",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - only spaces 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/.         ",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										".         "
									]
								}
							},
							"response": []
						},
						{
							"name": "word - space between (phrase) 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/grow food",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"grow food"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - only symbols 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/!*)",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"!*)"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - empty 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"Word is required.\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "word - non-latin letters 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/стажировка",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"стажировка"
									]
								}
							},
							"response": []
						},
						{
							"name": "word - number 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/12345",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"12345"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Words length",
					"item": [
						{
							"name": "1 letter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('f');",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', function () {",
											"    const body = pm.response.json();",
											"    const result = body.results.find(el => el.definition === 'a nonmetallic univalent element belonging to the halogens; usually a yellow irritating toxic flammable gas; a powerful oxidizing agent; recovered from fluorite or cryolite or fluorapatite');",
											"",
											"    pm.expect(result).not.undefined;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/f",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"f"
									]
								}
							},
							"response": []
						},
						{
							"name": "random 2 letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('op');",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/op",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"op"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('of');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', () => {",
											"    const body = pm.response.json();",
											"    _.each(body.results, (item) => {",
											"        pm.expect(item.definition).to.include('In a general sense, from, or out from; proceeding from; belonging to; relating to; concerning; -- used in a variety of applications.')",
											"    })",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/of",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"of"
									]
								}
							},
							"response": []
						},
						{
							"name": "abbreviation 4 letters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('ussr');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', () => {",
											"    const body = pm.response.json();",
											"    _.each(body.results, (item) => {",
											"        pm.expect(item.definition).to.include('a former communist country in eastern Europe and northern Asia; established in 1922; included Russia and 14 other soviet socialist republics (Ukraine and Byelorussia and others); officially dissolved 31 December 1991')",
											"    })",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/ussr",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"ussr"
									]
								}
							},
							"response": []
						},
						{
							"name": "random 3 letters 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/kot",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"kot"
									]
								}
							},
							"response": []
						},
						{
							"name": "very long mix of letters 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/ldjfhsddkfjhsjdfsdjfhfhskdfhkjsdfhksjfhksfhksdfhksfhksfhksfhskfhksfhksfhkshfkshfksfhksfhksfhskhfkshfksfhs",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"ldjfhsddkfjhsjdfsdjfhfhskdfhkjsdfhksjfhksfhksdfhksfhksfhksfhskfhksfhksfhkshfkshfksfhksfhksfhskhfkshfksfhs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "second endpoint {wordDetail}",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "wrong API key 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {",
											"    const body = pm.response.json();",
											"    pm.expect(body.message).to.be.include('You are not subscribed to this API.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "66ef45eb8amsh964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial/definition",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial",
										"definition"
									]
								}
							},
							"response": []
						},
						{
							"name": "no API Key 401 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check response body\", function () {",
											"    const body = pm.response.json();",
											"    pm.expect(body.message).to.be.include('nvalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial/definition",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial",
										"definition"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Positive checks",
					"item": [
						{
							"name": "definitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test (\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    ",
											"",
											" pm.expect (body.word).to.eql (pm.environment.get('color'));",
											"});",
											"",
											"",
											"pm.test (\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"     _.each(body.results, (item) => {",
											"        pm.expect(item.definition).to.be.exist",
											"    })",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.variables.",
											"replaceIn('{{$randomColor}}')",
											"",
											"pm.environment.set('color', word)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/{{color}}/definitions",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{color}}",
										"definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "synonyms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('happy');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.synonyms).to.be.exist;",
											"});",
											"",
											"",
											"pm.test(\"The `synonyms` is correct\", () => {",
											"    const body = pm.response.json();",
											"",
											"    pm.expect(body.synonyms).to.include('well-chosen')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/happy/synonyms",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"happy",
										"synonyms"
									]
								}
							},
							"response": []
						},
						{
							"name": "antonyms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('happy');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.antonyms).to.be.exist;",
											"});",
											"",
											"pm.test(\"The `antonyms` is correct\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.antonyms).to.include('unhappy')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/happy/antonyms",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"happy",
										"antonyms"
									]
								}
							},
							"response": []
						},
						{
							"name": "examples",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('constituent');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.examples).to.be.exist",
											"});",
											"",
											"",
											"pm.test(\"The `examples` is correct\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.examples).to.include('a component or constituent element of a system')",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constituent/examples",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constituent",
										"examples"
									]
								}
							},
							"response": []
						},
						{
							"name": "typeOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('constituent');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.typeOf).to.be.exist;",
											"});",
											"",
											"pm.test(\"The `typeOf` is correct\", () => {",
											"    const body = pm.response.json();",
											"",
											"    pm.expect(body.typeOf).to.include('voter')",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constituent/typeOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constituent",
										"typeOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasTypes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('loop');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasTypes).to.be.exist;",
											"});",
											"",
											"pm.test(\"The `hasTypes` is correct\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasTypes).to.include('hook')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/loop/hasTypes",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"loop",
										"hasTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "partOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('toe');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.partOf).to.be.exist;",
											"});",
											"",
											"pm.test(\"The `partOf` is correct\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.partOf).to.include('hoof')",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/toe/partOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"toe",
										"partOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasParts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('face');",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasParts).to.be.exist;",
											"});",
											"",
											"pm.test(\"The `hasParts` is correct\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasParts).to.include('beard')",
											"",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/face/hasParts",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"face",
										"hasParts"
									]
								}
							},
							"response": []
						},
						{
							"name": "instanceOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('newton');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.instanceOf).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.instanceOf).to.include('mathematician')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/newton/instanceOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"newton",
										"instanceOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasInstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('pope');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasInstances).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasInstances).to.include('angelo correr')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/pope/hasInstances",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"pope",
										"hasInstances"
									]
								}
							},
							"response": []
						},
						{
							"name": "similarTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('constituent');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.similarTo).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.similarTo).to.include('essential')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constituent/similarTo",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constituent",
										"similarTo"
									]
								}
							},
							"response": []
						},
						{
							"name": "also",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('brave');",
											"});",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.also).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.also).to.include('unafraid')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/brave/also",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"brave",
										"also"
									]
								}
							},
							"response": []
						},
						{
							"name": "entails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('beat');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.entails).to.be.exist",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.entails).to.include('win')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/beat/entails",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"beat",
										"entails"
									]
								}
							},
							"response": []
						},
						{
							"name": "memberOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('constituent');",
											"});",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.memberOf).to.be.exist",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.memberOf).to.include('constituency')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constituent/memberOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constituent",
										"memberOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasMembers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('church');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasMembers).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasMembers).to.include('christian')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/church/hasMembers",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"church",
										"hasMembers"
									]
								}
							},
							"response": []
						},
						{
							"name": "substanceOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('fat');",
											"});",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.substanceOf).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.substanceOf).to.include('adipose cell')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/fat/substanceOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"fat",
										"substanceOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasSubstances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('ice');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasSubstances).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasSubstances).to.include('water')",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/ice/hasSubstances",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"ice",
										"hasSubstances"
									]
								}
							},
							"response": []
						},
						{
							"name": "inCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('constituent');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.inCategory).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.inCategory).to.include('grammar')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constituent/inCategory",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constituent",
										"inCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('law');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasCategories).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasCategories).to.include('civil right')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/law/hasCategories",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"law",
										"hasCategories"
									]
								}
							},
							"response": []
						},
						{
							"name": "usageOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('teflon');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.usageOf).to.be.exist;",
											"});",
											"",
											"pm.test('The `detail` is correct', () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.usageOf).to.include('trademark')",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/teflon/usageOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"teflon",
										"usageOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasUsages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('colloquialism');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasUsages).to.be.exist;",
											"});",
											"",
											"pm.test(\"Check 'hasUsage' in the response\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.hasUsages).to.include('gal')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/colloquialism/hasUsages",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"colloquialism",
										"hasUsages"
									]
								}
							},
							"response": []
						},
						{
							"name": "inRegion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('biscuit');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.inRegion).to.be.exist;",
											"});",
											"",
											"",
											"pm.test(\"Check 'inRegion' detail\", () => {",
											"    const body = pm.response.json();",
											"",
											"    pm.expect(body.inRegion).to.include('britain')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/biscuit/inRegion",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"biscuit",
										"inRegion"
									]
								}
							},
							"response": []
						},
						{
							"name": "regionOf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('russia');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.regionOf).to.be.exist;",
											"});",
											"",
											"",
											"pm.test(\"check 'regionOf' in the response\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.regionOf).to.include('kolkhoz')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/russia/regionOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"russia",
										"regionOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "pertainsTo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('subtropical');",
											"});",
											"",
											"",
											"pm.test(\"Check 'word detail' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.pertainsTo).to.be.exist;",
											"});",
											"",
											"pm.test(\"check 'pertainsTo' in the response\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.pertainsTo).to.include('subtropics')",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/subtropical/pertainsTo",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"subtropical",
										"pertainsTo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative checks",
					"item": [
						{
							"name": "empty detail response",
							"item": [
								{
									"name": "existant word, but no existent detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 OK\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 600ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(600);",
													"});",
													"",
													"",
													"pm.test(\"Check 'word' in response body\", () => {",
													"    const body = pm.response.json();",
													"    pm.expect(body.word).to.be.eql('to');",
													"});",
													"",
													"",
													"pm.test(\"Check 'word detail' in response body\", () => {",
													"    const body = pm.response.json();",
													"    pm.expect(body.synonyms).to.be.exist;",
													"});",
													"",
													"pm.test(\"Check empty 'word detail' in response body\", () => {",
													"    const body = pm.response.json();",
													"    pm.expect(body.synonyms).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "X-RapidAPI-Key",
													"type": "string"
												},
												{
													"key": "value",
													"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{host}}/words/to/synonyms",
											"host": [
												"{{host}}"
											],
											"path": [
												"words",
												"to",
												"synonyms"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "definitions 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constnt/definitions",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constnt",
										"definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "synonyms 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/dfghjk/synonyms",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"dfghjk",
										"synonyms"
									]
								}
							},
							"response": []
						},
						{
							"name": "antonyms 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/fghjk/antonyms",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"fghjk",
										"antonyms"
									]
								}
							},
							"response": []
						},
						{
							"name": "examples 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/codfghjklnt/examples",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"codfghjklnt",
										"examples"
									]
								}
							},
							"response": []
						},
						{
							"name": "typeOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constdfghjkituent/typeOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constdfghjkituent",
										"typeOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasTypes 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/lohjkop/hasTypes",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"lohjkop",
										"hasTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "partOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cdfht/partOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cdfht",
										"partOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasParts 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/conssdfnt/hasParts",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"conssdfnt",
										"hasParts"
									]
								}
							},
							"response": []
						},
						{
							"name": "instanceOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfent/instanceOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfent",
										"instanceOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasInstances 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfent/hasInstances",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfent",
										"hasInstances"
									]
								}
							},
							"response": []
						},
						{
							"name": "similarTo 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfnt/similarTo",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfnt",
										"similarTo"
									]
								}
							},
							"response": []
						},
						{
							"name": "also 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/consdfghnt/also",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"consdfghnt",
										"also"
									]
								}
							},
							"response": []
						},
						{
							"name": "entails 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfent/entails",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfent",
										"entails"
									]
								}
							},
							"response": []
						},
						{
							"name": "memberOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdf/memberOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdf",
										"memberOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasMembers 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constitudfghjent/hasMembers ",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constitudfghjent",
										"hasMembers "
									]
								}
							},
							"response": []
						},
						{
							"name": "substanceOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfuent/substanceOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfuent",
										"substanceOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasSubstances 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/casdfent/hasSubstances",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"casdfent",
										"hasSubstances"
									]
								}
							},
							"response": []
						},
						{
							"name": "inCategory 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/123456/inCategory",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"123456",
										"inCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasCategories 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/dfghjk/hasCategories",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"dfghjk",
										"hasCategories"
									]
								}
							},
							"response": []
						},
						{
							"name": "usageOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/sdfgtuent/usageOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"sdfgtuent",
										"usageOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "hasUsages 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/csdfent/hasUsages",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"csdfent",
										"hasUsages"
									]
								}
							},
							"response": []
						},
						{
							"name": "inRegion 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/sdfg/inRegion ",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"sdfg",
										"inRegion "
									]
								}
							},
							"response": []
						},
						{
							"name": "regionOf 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/cosdfgnstituent/regionOf",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"cosdfgnstituent",
										"regionOf"
									]
								}
							},
							"response": []
						},
						{
							"name": "pertainsTo 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check response body\", () => {",
											"    const body = {",
											"        \"success\": false,",
											"        \"message\": \"word not found\"",
											"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(body);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/constsdfghjkent/pertainsTo",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"constsdfghjkent",
										"pertainsTo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy path",
					"item": [
						{
							"name": "Valid key, word, detail 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"",
											"pm.test(\"Check 'word' in response body\", () => {",
											"    const body = pm.response.json();",
											"    pm.expect(body.word).to.be.eql('crucial');",
											"});",
											"",
											"",
											"",
											"pm.test('The `Definition` is correct', () => {",
											"    const body = pm.response.json();",
											"    _.each(body.results, (item) => {",
											"        pm.expect(item.definition).to.include('of the greatest importance')",
											"    })",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-RapidAPI-Key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/words/crucial/definition",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"crucial",
										"definition"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}